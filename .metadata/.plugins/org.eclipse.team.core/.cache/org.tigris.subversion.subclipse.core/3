package com.shencai.communicationAPI.service.imp;

import com.shencai.communicationAPI.service.IDataSearchAPIService;
import com.shencai.communicationAPI.service.IDeviceAPIManageService;
import com.shencai.communicationMange.dao.ITOrgcenterDatCalibrationDao;
import com.shencai.communicationMange.dao.ITOrgcenterDatDayDao;
import com.shencai.communicationMange.dao.ITOrgcenterDatHearthDao;
import com.shencai.communicationMange.model.*;
import com.shencai.communicationMange.dao.ITOrgcenterDatSbdayDao;
import com.shencai.communicationMange.dao.ITOrgcenterDatSbrealDao;
import com.shencai.communicationMange.dao.ITOrgcenterDatStandardfluidDao;
import com.shencai.communicationMange.dao.ITOrgcenterTrandeviceDatastorageDao;
import com.shencai.communicationMange.dao.ITOrgcenterTrandeviceParameterDao;
import com.shencai.communicationMange.entity.TOrgcenterDatSbday;
import com.shencai.communicationMange.entity.TOrgcenterTrandeviceDatastorage;
import com.shencai.communicationMange.model.CommonModel;
import com.shencai.communicationMange.model.DatClibrationModel;
import com.shencai.communicationMange.model.DatDayModel;
import com.shencai.communicationMange.model.DatDayParam;
import com.shencai.communicationMange.model.DatSbRealModel;
import com.shencai.communicationMange.model.HearthDataModel;
import com.shencai.communicationMange.model.HearthDataParamModel;
import com.shencai.fw.common.base.entity.PagingParameter;
import com.shencai.fw.common.base.entity.ResultData;
import com.shencai.fw.common.base.service.BaseService;
import com.shencai.fw.common.exception.AccessExpiredException;
import com.shencai.fw.common.exception.ParamDataException;
import com.shencai.uc.model.UserInfo;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Created by Administrator on 2017/8/7.
 */
@Service
public class DataSearchAPIServiceImpl extends BaseService implements IDataSearchAPIService {

    @Autowired
    private ITOrgcenterDatHearthDao tOrgcenterDatHearthDao;
    @Autowired
    private ITOrgcenterTrandeviceParameterDao tOrgcenterTrandeviceParameterDao;
    @Autowired
    private ITOrgcenterDatDayDao datDayDao;
    @Autowired
    private IDeviceAPIManageService deviceAPIManageService;
    @Autowired
    private ITOrgcenterDatSbrealDao tOrgcenterDatSbrealDao;
    @Autowired
    private ITOrgcenterDatSbdayDao tOrgcenterDatSbdayDao;
    @Autowired
    private ITOrgcenterDatStandardfluidDao torgcenterDatSFDao;
    @Autowired
    private ITOrgcenterDatCalibrationDao tOrgcenterDatCalibrationDao;
    @Autowired
    private ITOrgcenterTrandeviceDatastorageDao tOrgcenterTrandeviceDatastorageDao;

    @Override
    public List<DatDayModel> listDatDay(String loginName, String password, DatDayParam datDayParam) throws Exception {
        if (StringUtils.isBlank(loginName) || StringUtils.isBlank(password)) {
            throw new ParamDataException("请传入用户名和密码！");
        }
        if (!deviceAPIManageService.checkUserInfo(loginName, password)) {
            throw new AccessExpiredException("验证不通过！");
        }
        UserInfo userInfo = new UserInfo();
        userInfo.setLoginName(loginName);
        datDayParam.setTbName(getTargetTableName(datDayParam.getTranDeviceID()));
        return datDayDao.pageDatDay(datDayParam, null).getDatas();
    }

    @Override
    public List<DatHourModel> listDatHour(String loginName, String password, DatDayParam datDayParam) throws Exception {
        if (StringUtils.isBlank(loginName) || StringUtils.isBlank(password)) {
            throw new ParamDataException("请传入用户名和密码！");
        }
        if (!deviceAPIManageService.checkUserInfo(loginName, password)) {
            throw new AccessExpiredException("验证不通过！");
        }
        UserInfo userInfo = new UserInfo();
        userInfo.setLoginName(loginName);
        datDayParam.setTbName(getTargetTableName(datDayParam.getTranDeviceID()));
        return datDayDao.pageDatHour(datDayParam, null).getDatas();
    }

    @Override
    public List<DatMinuteModel> listDatMinute(String loginName, String password, DatDayParam datDayParam) throws Exception {
        if (StringUtils.isBlank(loginName) || StringUtils.isBlank(password)) {
            throw new ParamDataException("请传入用户名和密码！");
        }
        if (!deviceAPIManageService.checkUserInfo(loginName, password)) {
            throw new AccessExpiredException("验证不通过！");
        }
        UserInfo userInfo = new UserInfo();
        userInfo.setLoginName(loginName);
        datDayParam.setTbName(getTargetTableName(datDayParam.getTranDeviceID()));
        return datDayDao.pageDatMinute(datDayParam, null).getDatas();
    }

    @Override
    public List<HearthDataModel> listHearth(String loginName, String password, HearthDataParamModel queryParams)
            throws Exception {
        if (StringUtils.isBlank(loginName) || StringUtils.isBlank(password)) {
            throw new ParamDataException("请传入用户名和密码！");
        }
        if (!deviceAPIManageService.checkUserInfo(loginName, password)) {
            throw new AccessExpiredException("验证不通过！");
        }
        UserInfo userInfo = new UserInfo();
        userInfo.setLoginName(loginName);
        queryParams.setTbName(getTargetTableName(queryParams.getDeviceId()));
        return tOrgcenterDatHearthDao.pageHearth(userInfo, null, queryParams).getDatas();
    }

    @Override
    public List<InstrumentParamDataModel> listInstrumentParm(String loginName, String password,
                                                             InstrumentParamModel queryParams) throws Exception {
        if (StringUtils.isBlank(loginName) || StringUtils.isBlank(password)) {
            throw new ParamDataException("请传入用户名和密码！");
        }
        if (!deviceAPIManageService.checkUserInfo(loginName, password)) {
            throw new AccessExpiredException("验证不通过！");
        }
        UserInfo userInfo = new UserInfo();
        userInfo.setLoginName(loginName);
        queryParams.setTbName(getTargetTableName(queryParams.getDeviceId()));
        return tOrgcenterTrandeviceParameterDao.pageInstrumentParm(userInfo, null, queryParams).getDatas();
    }

    @Override
    public ResultData<DatSbRealModel> listDatSbReal(String loginName,
                                                    String password, CommonModel queryParams, String deviceId) throws Exception {
        if (StringUtils.isBlank(loginName) || StringUtils.isBlank(password)) {
            throw new ParamDataException("请传入用户名和密码！");
        }
        if (!deviceAPIManageService.checkUserInfo(loginName, password)) {
            throw new AccessExpiredException("验证不通过！");
        }
        UserInfo userInfo = new UserInfo();
        userInfo.setLoginName(loginName);
        queryParams.setTbName(getTargetTableName(deviceId));
        return tOrgcenterDatSbrealDao.pageDatReal(userInfo, null, queryParams, deviceId);
    }

    @Override
    public ResultData<TOrgcenterDatSbday> listDatSbDay(String loginName,
                                                       String password, CommonModel queryParams, String deviceId) throws Exception {
        if (StringUtils.isBlank(loginName) || StringUtils.isBlank(password)) {
            throw new ParamDataException("请传入用户名和密码！");
        }
        if (!deviceAPIManageService.checkUserInfo(loginName, password)) {
            throw new AccessExpiredException("验证不通过！");
        }
        UserInfo userInfo = new UserInfo();
        userInfo.setLoginName(loginName);
        queryParams.setTbName(getTargetTableName(deviceId));
        return tOrgcenterDatSbdayDao.pageDatDay(userInfo, null, queryParams, deviceId);
    }

    @Override
    public ResultData<DatClibrationModel> listDatHjCalibration(
            String loginName, String password, CommonModel queryParams,
            String deviceId) throws Exception {
        UserInfo userInfo = new UserInfo();
        userInfo.setLoginName(loginName);
        queryParams.setTbName(getTargetTableName(deviceId));
        return tOrgcenterDatCalibrationDao.pageDatHjCalibration(userInfo, null, queryParams, deviceId);
    }

    @Override
    public ResultData<DatRealModel> pageDatReal(String loginName, String password, DatDayParam datDayParam, PagingParameter pageParams) throws Exception {
        if (StringUtils.isBlank(loginName) || StringUtils.isBlank(password)) {
            throw new ParamDataException("请传入用户名和密码！");
        }
        if (!deviceAPIManageService.checkUserInfo(loginName, password)) {
            throw new AccessExpiredException("验证不通过！");
        }
        UserInfo userInfo = new UserInfo();
        userInfo.setLoginName(loginName);
        datDayParam.setTbName(getTargetTableName(datDayParam.getTranDeviceID()));
        return datDayDao.pageDatReal(datDayParam, pageParams);
    }
	
	@Override
	public ResultData<DatSFModel> listDatStandardFluid(String loginName, String password, DatSFSearchModel queryParams) throws Exception{
		if (StringUtils.isBlank(loginName) || StringUtils.isBlank(password)) {
		 throw new ParamDataException("请传入用户名和密码！");
	    }
	    if (!deviceAPIManageService.checkUserInfo(loginName, password)) {
	   	 throw new AccessExpiredException("验证不通过！");
	    }
	    UserInfo userInfo = new UserInfo();
		userInfo.setLoginName(loginName);
		queryParams.setTbName(getTargetTableName(queryParams.getDeviceID()));
		return torgcenterDatSFDao.pageDatStandardFluid(userInfo, null, queryParams);
	}

	/**
	 * 根据设备id获取数据取值表后缀
	 * @param deviceId
	 * @return
	 * @throws Exception
	 */
	private String getTargetTableName (String deviceId) throws Exception {
		TOrgcenterTrandeviceDatastorage dataStorage = tOrgcenterTrandeviceDatastorageDao.getDataStorageByDeviceId(deviceId);
		return dataStorage.getTbName();
	}
}
