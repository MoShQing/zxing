package com.shencai.communicationAPI.controller;

import com.shencai.communicationAPI.controllerservice.IDataSearchAPIControllerService;
import com.shencai.communicationMange.model.*;
import com.shencai.communicationMange.entity.TOrgcenterDatSbday;
import com.shencai.communicationMange.model.CommonModel;
import com.shencai.communicationMange.model.DatClibrationModel;
import com.shencai.communicationMange.model.DatDayModel;
import com.shencai.communicationMange.model.DatDayParam;
import com.shencai.communicationMange.model.DatSbRealModel;
import com.shencai.communicationMange.model.HearthDataModel;
import com.shencai.communicationMange.model.HearthDataParamModel;
import com.shencai.fw.common.base.entity.PagingParameter;
import com.shencai.fw.common.base.entity.ResultData;
import com.shencai.fw.common.resolver.RequestJsonParam;
import com.shencai.fw.data.Result;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.sql.Timestamp;
import java.util.List;


/**
 * Created by Administrator on 2017/8/7.
 */
@Controller("dataSearchAPIController")
@RequestMapping("/service/communication/dataSearchAPI")
@Scope("prototype")
public class DataSearchAPIController {

    @Autowired
    private IDataSearchAPIControllerService dataSearchAPIControllerService;

    /**
     * 查询污染物日数据列表
     *
     * @param loginName
     * @param password
     * @param datDayParam
     * @return
     */
    @ResponseBody
    @RequestMapping("/listDatDay")
    public Result<List<DatDayModel>> listDatDay(String loginName, String password, 
    		@RequestJsonParam(value = "datDayParam", required = false) DatDayParam datDayParam) throws Exception {
        return dataSearchAPIControllerService.listDatDay(loginName, password, datDayParam);
    }

    /**
     * 查询污染物小时数据列表
     *
     * @param loginName
     * @param password
     * @param datDayParam 查询参数
     * @return
     */
    @ResponseBody
    @RequestMapping("/listDatHour")
    public Result<List<DatHourModel>> listDatHour(String loginName, String password, 
    		@RequestJsonParam(value = "datDayParam", required = false) DatDayParam datDayParam) throws Exception {
        return dataSearchAPIControllerService.listDatHour(loginName, password, datDayParam);
    }

    /**
     * 查询污染物分钟数据列表
     *
     * @param loginName
     * @param password
     * @param datDayParam 查询参数
     * @return
     */
    @ResponseBody
    @RequestMapping("/listDatMinute")
    public Result<List<DatMinuteModel>> listDatMinute(String loginName, String password, 
    		@RequestJsonParam(value = "datDayParam", required = false) DatDayParam datDayParam) throws Exception {
        return dataSearchAPIControllerService.listDatMinute(loginName, password, datDayParam);
    }

    /**
     * 查询污染物实时数据列表
     *
     * @param loginName
     * @param password
     * @param datDayParam 查询参数
     * @return
     */
    @ResponseBody
    @RequestMapping("/pageDatReal")
    public Result<ResultData<DatRealModel>> pageDatReal(String loginName, String password,
    		@RequestJsonParam(value = "datDayParam", required = false) DatDayParam datDayParam,
            @RequestJsonParam(value = "pageParams", required = false) PagingParameter pageParams)
            throws Exception {
        return dataSearchAPIControllerService.pageDatReal(loginName, password, datDayParam, pageParams);
    }

    /**
     * 查询炉温列表
     *
     * @param loginName
     * @param password
     * @param queryParams
     * @return
     */
    @RequestMapping("/listHearth")
    @ResponseBody
    public Result<List<HearthDataModel>> listHearth(String loginName, String password,
                                                    @RequestJsonParam(value = "queryParams", required = false) HearthDataParamModel queryParams)
            throws Exception {
        return dataSearchAPIControllerService.listHearth(loginName, password, queryParams);
    }

    /**
     * 获取动态管控仪器参数信息
     *
     * @param loginName
     * @param password
     * @param queryParams
     * @return
     */
    @RequestMapping("/listInstrumentParm")
    @ResponseBody
    public Result<List<InstrumentParamDataModel>> listInstrumentParm(String loginName, String password,
                                                                     @RequestJsonParam(value = "queryParams", required = false) InstrumentParamModel queryParams)
            throws Exception {
        return dataSearchAPIControllerService.listInstrumentParm(loginName, password, queryParams);
    }

    /**
     * 加载监测治理实施实时数据列表的服务
     *
     * @param loginName
     * @param password
     * @param queryParams 条件查询的参数
     * @param deviceId    设备标识
     * @return
     */
    @ResponseBody
    @RequestMapping("/listDatSbReal")
    public Result<ResultData<DatSbRealModel>> ListDatSbReal(String loginName, String password,
                                                            @RequestJsonParam(value = "queryParams", required = false) CommonModel queryParams, String deviceId) throws Exception {
        return dataSearchAPIControllerService.listDatSbReal(loginName, password, queryParams, deviceId);
    }

    /**
     * 加载监测治理实施日数据列表的服务
     *
     * @param loginName
     * @param password
     * @param queryParams 条件查询的参数
     * @param deviceId    设备标识
     * @return
     */
    @ResponseBody
    @RequestMapping("/listDatSbDay")
    public Result<ResultData<TOrgcenterDatSbday>> ListDatSbDay(String loginName, String password,
                                                               @RequestJsonParam(value = "queryParams", required = false) CommonModel queryParams, String deviceId) throws Exception {
        return dataSearchAPIControllerService.listDatSbDay(loginName, password, queryParams, deviceId);
    }

    /**
     * 加载动态管控校准数据列表的服务
     *
     * @param loginName
     * @param password
     * @param queryParams 条件查询的参数
     * @param deviceId    设备标识
     * @return
     */
    @ResponseBody
    @RequestMapping("/listDatHjCalibration")
    public Result<ResultData<DatClibrationModel>> ListDatHjCalibration(String loginName, String password,
                                                                       @RequestJsonParam(value = "queryParams", required = false) CommonModel queryParams, String deviceId) throws Exception {
        return dataSearchAPIControllerService.listDatHjCalibration(loginName, password, queryParams, deviceId);
    }
    
    /**
     * 动态管控试剂数据
     * @param loginName
     * @param password
     * @param queryParams 查询参数
     * @param deviceId 设备id
     * @return
     * @throws Exception
     */
    @ResponseBody
    @RequestMapping("/listDatStandardFluid")
    public Result<ResultData<DatSFModel>> listDatStandardFluid(String loginName,String password, 
    		@RequestJsonParam(value = "queryParams", required = false) DatSFSearchModel queryParams) throws Exception{
    	if(queryParams==null){
    		throw new Exception("查询参数不能为空");
    	}
    	return dataSearchAPIControllerService.listDatStandardFluid(loginName,password,queryParams);
    }
}
